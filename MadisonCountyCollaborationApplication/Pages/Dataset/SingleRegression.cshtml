@page
@using System.Data
@using System.Data.SqlClient
@model MadisonCountyCollaborationApplication.Pages.Dataset.SingleRegressionModel
@{
}
@if (ViewData.ContainsKey("ErrorMessage"))
{
    <script type="text/javascript">
        document.addEventListener("DOMContentLoaded", function () {
            var errorMessage = "@ViewData["ErrorMessage"]";
            // Display the error message at the top of the screen
            alert(errorMessage); // For simplicity, using an alert, but you can customize this
        });
    </script>
}
<div id="notification-area"></div>
@if (ViewData.ContainsKey("ErrorMessage"))
{
    <script type="text/javascript">
        document.addEventListener("DOMContentLoaded", function () {
            var errorMessage = "@Html.Raw(ViewData["ErrorMessage"])";
            var notificationArea = document.getElementById('notification-area');
            notificationArea.innerHTML = '<div class="alert alert-danger" role="alert">' + errorMessage + '</div>';
        });
    </script>
}


<div class="container">
    <div class="row justify-content-center">
        <div class="col-12 text-center">
            <h1 class="display-4">Data</h1>
        </div>
    </div>

    <div class="row justify-content-center">
        <form id="dataForm" asp-page-handler="CreateGraph" class="col-md-6">
            <div class="mb-3">
                <label class="form-label" for="IndependentVariable">Independent Variable</label>
                <select class="form-select" name="Independent" id="Independent" aria-label="Independent Variable">
                    @foreach (DataColumn column in Model.Data.Columns)
                    {
                        <option value="@column.ColumnName">@column.ColumnName.Replace("_", " ").TrimStart('_')</option>
                    }
                </select>
            </div>
            <div class="mb-3">
                <label class="form-label" for="DependentVariable">Dependent Variable</label>
                <select class="form-select" name="Dependent" id="Dependent" aria-label="Dependent Variable">
                    @foreach (DataColumn column in Model.Data.Columns)
                    {
                        <option value="@column.ColumnName">@column.ColumnName.Replace("_", " ").TrimStart('_')</option>
                    }
                </select>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </form>
    </div>

    <div class="row justify-content-center mt-4">
        <div id="jsonResponse" class="col-md-6" style="white-space: pre-wrap;"></div>
    </div>

    <div class="row justify-content-center mt-4">
        <div id="plotlyChart" class="col-md-12"></div>
    </div>
</div>


@section Scripts {
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('dataForm').addEventListener('submit', function (event) {
                event.preventDefault(); // Prevent the form from submitting traditionally

                var formData = new FormData(this);
                var independentVariableName = document.getElementById('Independent').options[document.getElementById('Independent').selectedIndex].text;
                var dependentVariableName = document.getElementById('Dependent').options[document.getElementById('Dependent').selectedIndex].text;

                fetch(this.action, {
                    method: 'POST',
                    body: formData,
                })
                    .then(response => response.json())
                    .then(data => {
                        // Added to print JSON data to check formatting
                        // document.getElementById('jsonResponse').textContent = JSON.stringify(data, null, 2);

                        var xValues = data.Data.Fields[0];
                        var yValues = data.Data.Fields[1];
                        var xMin = Math.min(...xValues);
                        var yMin = Math.min(...yValues);
                        var xMax = Math.max(...xValues);
                        // Extend the x-range significantly
                        var xExtension = (xMax - xMin) * 0.5; // Extend by 50% of the range on both sides
                        var extendedXMin = xMin - (xMin < 0 ? Math.abs(xMin * 0.5) : 0); // Adjust extendedXMin if xMin is less than 0
                        var extendedXMax = xMax + xExtension;

                        // Generate points for the regression line using the extended range
                        var regressionLineX = [extendedXMin, extendedXMax];
                        var regressionLineY = regressionLineX.map(x => data.RegressionLine.M * x + data.RegressionLine.B);

                        var plotData = [{
                            x: xValues,
                            y: data.Data.Fields[1],
                            mode: 'markers',
                            type: 'scatter',
                            name: 'Data Points'
                        }, {
                            x: regressionLineX,
                            y: regressionLineY,
                            mode: 'lines',
                            type: 'scatter',
                            name: 'Regression Line'
                        }];

                        var layout = {
                            title: 'Relationship between ' + independentVariableName + ' and ' + dependentVariableName,
                            xaxis: { title: independentVariableName },
                            yaxis: { title: dependentVariableName },
                            annotations: [{
                                x: 0.5,
                                y: 1.13,
                                xref: 'paper',
                                yref: 'paper',
                                text: 'Regression Equation: ' + data.RegressionEquation,
                                showarrow: false,
                                font: { size: 16 }
                            }]
                        };

                        Plotly.newPlot('plotlyChart', plotData, layout);
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        document.getElementById('jsonResponse').textContent = 'Error fetching data: ' + error.toString();
                    });
            });
        });
        document.getElementById('saveGraph').addEventListener('click', function () {
            Plotly.toImage('plotlyChart', { format: 'png' }).then(function (dataUrl) {
                // Send this dataUrl to the server
                fetch('/YourController/SaveGraph', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ imageData: dataUrl })
                })
                    .then(response => response.text())
                    .then(data => {
                        console.log(data); // Handle the server response, e.g., showing a success message
                    })
                    .catch(error => console.error('Error:', error));
            });
        });

    </script>
}